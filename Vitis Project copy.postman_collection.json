{
	"info": {
		"name": "Vitis Project copy",
		"_postman_id": "3c3cd92a-7f75-0500-1363-5fb5f40ed8a1",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TRY",
			"item": [
				{
					"name": "Tests",
					"description": "",
					"item": [
						{
							"name": "Get private token (Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68d2fadb-2323-44ff-936e-eadd0ab8ceff",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    pm.environment.set(\"user\", \"\");",
											"    pm.environment.set(\"password\", \"\");",
											"    ",
											"    pm.environment.set(\"token\", jsonData.token);",
											"    pm.environment.set(\"admin_id\",jsonData.user_id);",
											"    ",
											"    postman.setNextRequest(\"Get token\");",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f18bd064-d083-45c1-a3f3-a2df8e531289",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"user\", \"admin\");",
											"pm.environment.set(\"password\", \"admin\");",
											"",
											"",
											"pm.environment.set(\"time\",0);",
											"pm.environment.set(\"bool\", \"admin\");",
											"pm.environment.set(\"i_domain\",0);",
											"pm.environment.set(\"i_group\", 0);",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user",
											"type": "text",
											"value": "{{user}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "duration",
											"type": "text",
											"value": "60"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/privatetoken",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"privatetoken"
									]
								},
								"description": "Request to get a token"
							},
							"response": []
						},
						{
							"name": "Get private token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23161240-318f-43ff-9718-8781aa3ad289",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    console.log(\"Token = \" + jsonData.token);",
											"    pm.environment.set(\"token\", jsonData.token);",
											"}",
											"",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1399e644-271b-422d-9cc9-05e2c20a52fc",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"bool\", \"user\");",
											"pm.environment.set(\"i_domain\",0);",
											"pm.environment.set(\"i_group\", 0);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user",
											"type": "text",
											"value": "{{user}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "duration",
											"type": "text",
											"value": "60"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/privatetoken",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"privatetoken"
									]
								},
								"description": "Request to get a token"
							},
							"response": []
						},
						{
							"name": "Get token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71cd52ae-c01c-45e9-95ea-0f578400e53e",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    pm.test(\"Received token equal saved one\", function () {",
											"        var jsonData = pm.response.json();",
											"        pm.expect(jsonData.token).to.eql(pm.environment.get(\"token\"));",
											"    });",
											"}",
											"",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/privatetoken?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"privatetoken"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									]
								},
								"description": "Request to get a token"
							},
							"response": []
						},
						{
							"name": "Get public token",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/publictoken",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"publictoken"
									]
								},
								"description": "Request to get a token"
							},
							"response": []
						},
						{
							"name": "Add User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    var b = pm.environment.get(\"bool\");",
											"    ",
											"    console.log(b);",
											"    if(b == \"admin\"){",
											"        pm.environment.set(\"user_id\",jsonData.user_id);",
											"        console.log(\"user_id = \" + jsonData.user_id);",
											"    }",
											"}",
											"",
											"",
											""
										],
										"id": "717cf06b-d053-4f6f-824d-05781d9867da",
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"login\", \"Basic_user\");",
											"pm.environment.set(\"name\", \"Basic_user\");",
											"pm.environment.set(\"password\", \"Basic_user\");",
											"pm.environment.set(\"password_confirm\", \"Basic_user\");",
											"",
											"pm.environment.set(\"email\",\"\");",
											"pm.environment.set(\"company\",\"\");",
											"pm.environment.set(\"department\",\"\");",
											"pm.environment.set(\"groups\", \"\"); //18 = Cadastre",
											"pm.environment.set(\"privileges\",\"vitis_user\");"
										],
										"id": "eafbf8d5-6dc0-4d50-90f7-70e95f121afe",
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"type": "text",
											"value": "{{token}}"
										},
										{
											"key": "login",
											"type": "text",
											"value": "{{login}}"
										},
										{
											"key": "action",
											"type": "text",
											"value": "{{action}}"
										},
										{
											"key": "name",
											"type": "text",
											"value": "{{name}}"
										},
										{
											"key": "email",
											"type": "text",
											"value": "{{email}}"
										},
										{
											"key": "company",
											"type": "text",
											"value": "{{company}}"
										},
										{
											"key": "department",
											"type": "text",
											"value": "{{department}}"
										},
										{
											"key": "groups",
											"type": "text",
											"value": "{{groups}}"
										},
										{
											"key": "privileges",
											"type": "text",
											"value": "{{privileges}}"
										},
										{
											"key": "ip_constraint",
											"type": "text",
											"value": "{{ip_constraint}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "password_confirm",
											"type": "text",
											"value": "{{password_confirm}}"
										},
										{
											"key": "restriction",
											"type": "text",
											"value": "{{restriction}}"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/users",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"users"
									]
								},
								"description": "Request to add user"
							},
							"response": []
						},
						{
							"name": "Add Group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fa6f5a7f-7693-4256-8630-7394b401401c",
										"type": "text/javascript",
										"exec": [
											"var i_g = pm.environment.get(\"i_group\");",
											"var g_name = \"Test_Group\".concat(i_g);",
											"var env_g_name = \"group_name\".concat(i_g);",
											"console.log(g_name);",
											"",
											"pm.environment.set(env_g_name,g_name);",
											"pm.environment.set(\"group_name\",g_name);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b2d79a1e-ab0b-43fc-bd31-e9ec5508718b",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"var i_g = pm.environment.get(\"i_group\");",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    ",
											"    var g_id = \"group_id\".concat(i_g);",
											"    console.log(\"group_id = \" + jsonData.group_id);",
											"    pm.environment.set(g_id, jsonData.group_id);",
											"    pm.environment.set(\"group_id\", jsonData.group_id);",
											"",
											"    ",
											"}",
											"",
											"if(i_g < 2){",
											"        i_g++;",
											"        pm.environment.set(\"i_group\", i_g);",
											"        postman.setNextRequest(\"Add Group\");",
											"}",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"type": "text",
											"value": "{{token}}"
										},
										{
											"key": "name",
											"type": "text",
											"value": "{{group_name}}"
										},
										{
											"key": "users",
											"type": "text",
											"value": "{{user_id}}"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/groups",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"groups"
									]
								},
								"description": "Request to add group"
							},
							"response": []
						},
						{
							"name": "Update Group",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ead88754-aea1-4098-97b7-2806019a2872",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"idList\", pm.environment.get(\"user_id\")+'|'+pm.environment.get(\"admin_id\"));",
											"pm.environment.set(\"name\", \"Test_Group_2\");",
											"pm.environment.set(\"group_name\",pm.environment.get(\"name\"));",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0c50e82b-2c85-4f4b-bb7e-49a367d6289b",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/groups/:group_id?token={{token}}&name={{name}}&users={{idList}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"groups",
										":group_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "name",
											"value": "{{name}}",
											"equals": true
										},
										{
											"key": "users",
											"value": "{{idList}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "group_id",
											"value": "{{group_id}}"
										}
									]
								},
								"description": "Request to update Group"
							},
							"response": []
						},
						{
							"name": "Get Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "004c8f4d-016b-4d17-b114-6ba77831c84a",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    pm.test(\"Update confirm\", function () {",
											"        var jsonData = pm.response.json();",
											"        console.log(jsonData.groups[0].name);",
											"        pm.expect(jsonData.groups[0].name).to.eql(pm.environment.get(\"group_name\"));",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/groups/:group_id?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"groups",
										":group_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "group_id",
											"value": "{{group_id}}"
										}
									]
								},
								"description": "Request to get Group by id"
							},
							"response": []
						},
						{
							"name": "delete Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d76fe9e-3f44-4479-b05d-61b2ecc859be",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/groups/:group_id?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"groups",
										":group_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "group_id",
											"value": "{{group_id}}"
										}
									]
								},
								"description": "Request to delete Group"
							},
							"response": []
						},
						{
							"name": "Get Groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69a0b8ab-992c-473b-8154-7f7067556936",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    for(var i in jsonData.groups){",
											"            if(jsonData.groups[i].name == \"Cadastre\"){",
											"                console.log(\"Cadastre found\");",
											"                pm.environment.set(\"groups\",jsonData.groups[i].group_id);",
											"            }",
											"        }",
											"    pm.test(\"Delete confirm\", function () { ",
											"        var res = null;",
											"        for(var i in jsonData.groups){",
											"            if(jsonData.groups[i].name == \"Test_Group_2\"){",
											"                console.log(\"Good\");",
											"                res = pm.environment.get(\"group_id\");",
											"                pm.expect(\"Group id : \" + res).not.to.eql(\"Group id : \" + parseInt(pm.environment.get(\"group_id\")));",
											"            }",
											"        }",
											"        console.log(\"Group id : \" + res);",
											"        console.log(\"Group id : \" + parseInt(pm.environment.get(\"group_id\")));",
											"    });",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/groups?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"groups"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										}
									]
								},
								"description": "Request to get Groups"
							},
							"response": []
						},
						{
							"name": "delete Groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5ea891a-c6dd-45d2-a0f1-bb02270b231b",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "33a038c6-c33e-4d20-a081-c414375fefd2",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"idList\", pm.environment.get(\"group_id0\")+'|'+pm.environment.get(\"group_id1\"));"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/groups/?token={{token}}&idList={{idList}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"groups",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "idList",
											"value": "{{idList}}",
											"equals": true
										}
									]
								},
								"description": "Request to delete Group"
							},
							"response": []
						},
						{
							"name": "Update User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "32c0951c-3369-46df-9f23-8aaefaeda043",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"email\",\"Basic_user@corp.com\");",
											"pm.environment.set(\"company\",\"corp\");",
											"pm.environment.set(\"department\",\"11223\");",
											"pm.environment.set(\"privileges\",\"vitis_user|vitis_admin\");",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "933deab6-1461-4a7e-bec3-a5f11024ad52",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/users/:user_id?token={{token}}&login={{login}}&name={{name}}&email={{email}}&company={{company}}&department={{department}}&groups={{groups}}&privileges={{privileges}}&ip_constraint={{ip_constraint}}&password={{password}}&password_confirm={{password_confirm}}&restriction={{restriction}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "login",
											"value": "{{login}}",
											"equals": true
										},
										{
											"key": "name",
											"value": "{{name}}",
											"equals": true
										},
										{
											"key": "email",
											"value": "{{email}}",
											"equals": true
										},
										{
											"key": "company",
											"value": "{{company}}",
											"equals": true
										},
										{
											"key": "department",
											"value": "{{department}}",
											"equals": true
										},
										{
											"key": "groups",
											"value": "{{groups}}",
											"equals": true
										},
										{
											"key": "privileges",
											"value": "{{privileges}}",
											"equals": true
										},
										{
											"key": "ip_constraint",
											"value": "{{ip_constraint}}",
											"equals": true
										},
										{
											"key": "password",
											"value": "{{password}}",
											"equals": true
										},
										{
											"key": "password_confirm",
											"value": "{{password_confirm}}",
											"equals": true
										},
										{
											"key": "restriction",
											"value": "{{restriction}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								},
								"description": "Request to update User"
							},
							"response": []
						},
						{
							"name": "Get User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03f690e9-b8b6-4057-875d-83fea75f30f4",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"        pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    //Do stuff here",
											"    pm.test(\"Update confirm\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log(jsonData.groups[0].name);",
											"        pm.expect(jsonData.users[0].email).to.eql(pm.environment.get(\"email\"));",
											"        pm.expect(jsonData.users[0].company).to.eql(pm.environment.get(\"company\"));",
											"        pm.expect(jsonData.users[0].department).to.eql(pm.environment.get(\"department\"));",
											"        pm.expect(jsonData.users[0].groups).to.eql(parseInt(pm.environment.get(\"groups\")));",
											"        pm.expect(jsonData.users[0].privileges).to.eql(pm.environment.get(\"privileges\"));",
											"    });",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/users/:user_id?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								},
								"description": "Request to get User by id"
							},
							"response": []
						},
						{
							"name": "delete User",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "810a04e4-4e24-4915-bcc2-ac561852fec5",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.to.have.status(200)){",
											"    var jsonData = pm.response.json();",
											"",
											"    if(jsonData.status === 0){",
											"        if (jsonData.errorMessage !== null){",
											"            var ErrorMess = jsonData.errorMessage;",
											"            console.log(ErrorMess);",
											"            pm.test(ErrorMess, function () {});",
											"        }",
											"        else{",
											"            var ErrorMess = jsonData.error;",
											"            console.log(ErrorMess);",
											"            pm.test(ErrorMess, function () {});",
											"        }",
											"    }",
											"    else{",
											"        pm.test(\"Status equal 1\", function () {",
											"        pm.expect(jsonData.status).to.eql(1);",
											"        });",
											"        pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);});",
											"        ",
											"        //Do stuff here",
											"       ",
											"    }",
											"    var b = pm.environment.get(\"bool\");",
											"    if(b == \"user\"){",
											"        pm.environment.set(\"user_id\",pm.environment.get(\"tmpo_uID\"));",
											"        pm.environment.unset(\"tmpo_uID\");",
											"        ",
											"    }",
											"}else{",
											"    postman.setNextRequest(\"Get Privilege\");",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c074021-9c7c-41ca-a211-77cd2bf105d8",
										"type": "text/javascript",
										"exec": [
											"console.log(pm.environment.get(\"user_id\"));",
											"var b = pm.environment.get(\"bool\");",
											"if(b == \"user\"){",
											"    pm.environment.set(\"tmpo_uID\",pm.environment.get(\"user_id\"));",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/users/:user_id?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								},
								"description": "Request to delete User"
							},
							"response": []
						},
						{
							"name": "Get Privilege",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2a6388d-4802-4d63-9796-2ec6ffdc5d5b",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/privileges/:rolname?token={{token}}&description={{description}}&users={{users}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"privileges",
										":rolname"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "description",
											"value": "{{description}}",
											"equals": true
										},
										{
											"key": "users",
											"value": "{{users}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "rolname",
											"value": "vitis_admin"
										}
									]
								},
								"description": "Request to get Privilege by rolname"
							},
							"response": []
						},
						{
							"name": "Update Privilege",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fdcf67f-d233-41cf-b65e-dad424aafa3b",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/privileges/:rolname?token={{token}}&description={{description}}&users={{users}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"privileges",
										":rolname"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "description",
											"value": "{{description}}",
											"equals": true
										},
										{
											"key": "users",
											"value": "{{users}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "rolname",
											"value": "{{rolname}}"
										}
									]
								},
								"description": "Request to update Privilege"
							},
							"response": []
						},
						{
							"name": "Get Privileges",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c23b5812-2fdb-4f22-b87f-a6f9957a9765",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/privileges?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"privileges"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										}
									]
								},
								"description": "Request to get Privileges"
							},
							"response": []
						},
						{
							"name": "Add Domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92ad4a25-4ca0-48a1-b21c-cf3a7ca647f6",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"var i_d = pm.environment.get(\"i_domain\");",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    ",
											"    var d_id = \"domain_id\".concat(i_d);",
											"    console.log(\"domain_id = \" + jsonData.domain_id);",
											"    pm.environment.set(d_id, jsonData.domain_id);",
											"    pm.environment.set(\"domain_id\", jsonData.domain_id);",
											"",
											"    ",
											"}",
											"",
											"if(i_d < 2){",
											"        i_d++;",
											"        pm.environment.set(\"i_domain\", i_d);",
											"        postman.setNextRequest(\"Add Domain\");",
											"}",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74da26e3-3eaa-42a3-8c79-1c3e8a89757c",
										"type": "text/javascript",
										"exec": [
											"var i_d = pm.environment.get(\"i_domain\");",
											"var d_name = \"Domain_\".concat(i_d);",
											"var env_d_name = \"domain\".concat(i_d);",
											"console.log(d_name);",
											"",
											"pm.environment.set(env_d_name,d_name);",
											"pm.environment.set(\"domain\",d_name);",
											"pm.environment.set(\"alias\",d_name);",
											"pm.environment.set(\"server\",d_name);",
											"pm.environment.set(\"port\",parseInt(i_d) + 100);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"type": "text",
											"value": "{{token}}"
										},
										{
											"key": "domain",
											"type": "text",
											"value": "{{domain}}"
										},
										{
											"key": "alias",
											"type": "text",
											"value": "{{alias}}"
										},
										{
											"key": "server",
											"type": "text",
											"value": "{{server}}"
										},
										{
											"key": "port",
											"type": "text",
											"value": "{{port}}"
										},
										{
											"key": "dn_search_user",
											"type": "text",
											"value": "{{dn_search_user}}"
										},
										{
											"key": "filter_user",
											"type": "text",
											"value": "{{filter_user}}"
										},
										{
											"key": "dn_search_group",
											"type": "text",
											"value": "{{dn_search_group}}"
										},
										{
											"key": "filter_group",
											"type": "text",
											"value": "{{filter_group}}"
										},
										{
											"key": "login",
											"type": "text",
											"value": "{{login}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "type",
											"type": "text",
											"value": "AD"
										},
										{
											"key": "verify_rights",
											"type": "text",
											"value": "{{verify_rights}}"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/domains",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"domains"
									]
								},
								"description": "Request to add domain"
							},
							"response": []
						},
						{
							"name": "Update Domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "673ef214-fb75-4576-b99a-74af42ee2a4c",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"        pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    //Do stuff here",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58457ddd-ef69-4427-b087-b85067a22ef6",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"domain\",\"Domain2\");",
											"pm.environment.set(\"dn_search_user\",\"Some_user\");",
											"pm.environment.set(\"filter_user\",\"A_user\");",
											"pm.environment.set(\"dn_search_group\",\"Some_group\");",
											"pm.environment.set(\"filter_group\",\"A_group\");",
											"pm.environment.set(\"login\",\"root\");",
											"pm.environment.set(\"password\",\"toor\");"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/domains/:domain_id?token={{token}}&domain={{domain}}&alias={{alias}}&server={{server}}&port={{port}}&dn_search_user={{dn_search_user}}&filter_user={{filter_user}}&dn_search_group={{dn_search_group}}&filter_group={{filter_group}}&login={{login}}&password={{password}}&type=AD&verify_rights={{verify_rights}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"domains",
										":domain_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "domain",
											"value": "{{domain}}",
											"equals": true
										},
										{
											"key": "alias",
											"value": "{{alias}}",
											"equals": true
										},
										{
											"key": "server",
											"value": "{{server}}",
											"equals": true
										},
										{
											"key": "port",
											"value": "{{port}}",
											"equals": true
										},
										{
											"key": "dn_search_user",
											"value": "{{dn_search_user}}",
											"equals": true
										},
										{
											"key": "filter_user",
											"value": "{{filter_user}}",
											"equals": true
										},
										{
											"key": "dn_search_group",
											"value": "{{dn_search_group}}",
											"equals": true
										},
										{
											"key": "filter_group",
											"value": "{{filter_group}}",
											"equals": true
										},
										{
											"key": "login",
											"value": "{{login}}",
											"equals": true
										},
										{
											"key": "password",
											"value": "{{password}}",
											"equals": true
										},
										{
											"key": "type",
											"value": "AD",
											"equals": true
										},
										{
											"key": "verify_rights",
											"value": "{{verify_rights}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "domain_id",
											"value": "{{domain_id}}"
										}
									]
								},
								"description": "Request to update domain"
							},
							"response": []
						},
						{
							"name": "Get Domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b04a7b66-67a4-44f5-b373-16e8e40311df",
										"type": "text/javascript",
										"exec": [
											"// Unchanged yet",
											"",
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"        pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    //Do stuff here",
											"    pm.test(\"Update confirm\", function () {",
											"        var jsonData = pm.response.json();",
											"        //console.log(jsonData.groups[0].name);",
											"        pm.expect(jsonData.domains[0].dn_search_user).to.eql(pm.environment.get(\"dn_search_user\"));",
											"        pm.expect(jsonData.domains[0].filter_user).to.eql(pm.environment.get(\"filter_user\"));",
											"        pm.expect(jsonData.domains[0].dn_search_group).to.eql(pm.environment.get(\"dn_search_group\"));",
											"        pm.expect(jsonData.domains[0].filter_group).to.eql(pm.environment.get(\"filter_group\"));",
											"        pm.expect(jsonData.domains[0].login).to.eql(pm.environment.get(\"login\"));",
											"        pm.expect(jsonData.domains[0].password).to.eql(pm.environment.get(\"password\"));",
											"        ",
											"    });",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/domains/:domain_id?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"domains",
										":domain_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "domain_id",
											"value": "{{domain_id}}"
										}
									]
								},
								"description": "Request to get Domain by id"
							},
							"response": []
						},
						{
							"name": "delete Domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cacb60d-f643-4d2f-8373-9d1a06a4d6ae",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/domains/:domain_id?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"domains",
										":domain_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "domain_id",
											"value": "{{domain_id}}"
										}
									]
								},
								"description": "Request to delete Domain"
							},
							"response": []
						},
						{
							"name": "Get Domains",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8eef362d-1852-457d-b181-529f58a8afb2",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t+= parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    ",
											"    pm.test(\"Delete confirm\", function () { ",
											"        var res = null;",
											"        for(var i in jsonData.domains){",
											"            if(jsonData.domains[i].name == \"Domain2\"){",
											"                console.log(\"Good\");",
											"                res = pm.environment.get(\"domain_id\");",
											"                pm.expect(\"Domain id : \" + res).not.to.eql(\"Domain id : \" + parseInt(pm.environment.get(\"domain_id\")));",
											"            }",
											"        }",
											"        console.log(\"Group id : \" + res);",
											"        console.log(\"Group id : \" + parseInt(pm.environment.get(\"domain_id\")));",
											"    });",
											"",
											"",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/domains?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"domains"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										}
									]
								},
								"description": "Request to get Domains"
							},
							"response": []
						},
						{
							"name": "delete Domain",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86412da5-a9b6-4e7e-90b5-6dca4d153956",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}",
											"",
											"pm.environment.set(\"domain\",\"\");",
											"pm.environment.set(\"alias\",\"\");",
											"pm.environment.set(\"server\",\"\");",
											"pm.environment.set(\"port\",\"\");",
											"pm.environment.set(\"domain\",\"\");",
											"pm.environment.set(\"dn_search_user\",\"\");",
											"pm.environment.set(\"filter_user\",\"\");",
											"pm.environment.set(\"dn_search_group\",\"\");",
											"pm.environment.set(\"filter_group\",\"\");",
											"pm.environment.set(\"login\",\"\");",
											"pm.environment.set(\"password\",\"\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "934594ac-7b6f-4a41-8d70-0dd50d86cc24",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"idList\", pm.environment.get(\"domain_id0\")+'|'+pm.environment.get(\"domain_id1\"));"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/domains/?token={{token}}&idList={{idList}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"domains",
										""
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "idList",
											"value": "{{idList}}",
											"equals": true
										}
									]
								},
								"description": "Request to delete Domain"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "genericquerys",
					"description": "Folder for genericquerys",
					"item": [
						{
							"name": "Get Querys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bef805c7-d64f-4657-bf28-302d9ff0e6ae",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"var i_q = pm.environment.get(\"max_query\");",
											"",
											"//should be 0 instead of 1",
											"if(jsonData.status === 1){ ",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.genericquerys[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"database\",jsonData.genericquerys[0].database);",
											"    }",
											"    ",
											"    /*var tab=[];",
											"",
											"    for (var i in jsonData.genericquerys){",
											"        //console.log(jsonData.genericquerys[i].database);",
											"        tab.push(jsonData.genericquerys[i].database);",
											"        i_q++;",
											"    }",
											"    //console.log(tab);",
											"    pm.environment.set(\"databases\",tab);",
											"    var t = [];",
											"    t = pm.environment.get(\"databases\");",
											"    //console.log(t);",
											"    pm.environment.set(\"max_query\",i_q);*/",
											"}",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/genericquerys/databases?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"genericquerys",
										"databases"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									]
								},
								"description": "Get the dtabases list"
							},
							"response": []
						},
						{
							"name": "Get Querys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e205e15-9474-4b14-b5c4-ff411f882e0f",
										"type": "text/javascript",
										"exec": [
											"/*var tmp = pm.environment.get(\"databases\");",
											"var dbs = tmp.split(',');",
											"console.log(dbs);",
											"var i_q = pm.environment.get(\"i_query\");",
											"pm.environment.set(\"database\",dbs[i_q]);*/"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d5f9fdc5-006b-4f18-a19e-e0f26b69e068",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"        pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    if(jsonData.genericquerys[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"schema\",jsonData.genericquerys[0].schema_name);",
											"    }",
											"    //Do stuff here",
											"    /*var i_q = pm.environment.get(\"i_query\");",
											"    var max_q = pm.environment.get(\"max_query\");",
											"    if(i_q < 5){",
											"        i_q++;",
											"        pm.environment.set(\"i_query\",i_q);",
											"    }*/",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/genericquerys/:database/schemas?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"genericquerys",
										":database",
										"schemas"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "database",
											"value": "{{database}}"
										}
									]
								},
								"description": "Get the database schemas"
							},
							"response": []
						},
						{
							"name": "Get Querys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13400b66-36ff-4dec-a883-34804445d8b2",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.genericquerys[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"table_name\",jsonData.genericquerys[0].table_name);",
											"    }",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/genericquerys?token={{token}}&login={{login}}&password={{password}}&server={{server}}&port={{port}}&sgbd={{sgbd}}&database={{database}}&schema={{schema}}&table={{table}}&filter={{filter}}&limit={{limit}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"genericquerys"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "login",
											"value": "{{login}}",
											"equals": true
										},
										{
											"key": "password",
											"value": "{{password}}",
											"equals": true
										},
										{
											"key": "server",
											"value": "{{server}}",
											"equals": true
										},
										{
											"key": "port",
											"value": "{{port}}",
											"equals": true
										},
										{
											"key": "sgbd",
											"value": "{{sgbd}}",
											"equals": true
										},
										{
											"key": "database",
											"value": "{{database}}",
											"equals": true
										},
										{
											"key": "schema",
											"value": "{{schema}}",
											"equals": true
										},
										{
											"key": "table",
											"value": "{{table}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										}
									]
								},
								"description": "Request to query a schema. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
							},
							"response": []
						},
						{
							"name": "Get Querys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fee9b1ba-6748-43d1-b853-1fc373d33122",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/genericquerys/:table_name/columns?token={{token}}&login={{login}}&password={{password}}&server={{server}}&port={{port}}&sgbd={{sgbd}}&database={{database}}&schema={{schema}}&encoding={{encoding}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"genericquerys",
										":table_name",
										"columns"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "login",
											"value": "{{login}}",
											"equals": true
										},
										{
											"key": "password",
											"value": "{{password}}",
											"equals": true
										},
										{
											"key": "server",
											"value": "{{server}}",
											"equals": true
										},
										{
											"key": "port",
											"value": "{{port}}",
											"equals": true
										},
										{
											"key": "sgbd",
											"value": "{{sgbd}}",
											"equals": true
										},
										{
											"key": "database",
											"value": "{{database}}",
											"equals": true
										},
										{
											"key": "schema",
											"value": "{{schema}}",
											"equals": true
										},
										{
											"key": "encoding",
											"value": "{{encoding}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "table_name",
											"value": "{{table_name}}"
										}
									]
								},
								"description": "Request to query. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
							},
							"response": []
						},
						{
							"name": "Get Querys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ddfdce1-f346-45fb-8e60-cad044f1a5ba",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/genericquerys/:table_name?token={{token}}&login={{login}}&password={{password}}&server={{server}}&port={{port}}&sgbd={{sgbd}}&database={{database}}&schema={{schema}}&encoding={{encoding}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"genericquerys",
										":table_name"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "login",
											"value": "{{login}}",
											"equals": true
										},
										{
											"key": "password",
											"value": "{{password}}",
											"equals": true
										},
										{
											"key": "server",
											"value": "{{server}}",
											"equals": true
										},
										{
											"key": "port",
											"value": "{{port}}",
											"equals": true
										},
										{
											"key": "sgbd",
											"value": "{{sgbd}}",
											"equals": true
										},
										{
											"key": "database",
											"value": "{{database}}",
											"equals": true
										},
										{
											"key": "schema",
											"value": "{{schema}}",
											"equals": true
										},
										{
											"key": "encoding",
											"value": "{{encoding}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "table_name",
											"value": "{{table_name}}"
										}
									]
								},
								"description": "Request to query a table. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "modes",
					"description": "Folder for modes",
					"item": [
						{
							"name": "Get Mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed7d6fdc-14f0-47ed-97b7-2cd03626c806",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"        pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"        ",
											"    });",
											"    ",
											"    //Do stuff here",
											"    ",
											"    if(jsonData.modes[0]!==null && jsonData.modes[1]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"mode_id_0\",jsonData.modes[0].mode_id);",
											"        pm.environment.set(\"mode_id_1\",jsonData.modes[1].mode_id);",
											"    }",
											"    ",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/modes/:mode_id?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"modes",
										":mode_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "mode_id",
											"value": "{{mode_id}}"
										}
									]
								},
								"description": "Request to get Mode by id"
							},
							"response": []
						},
						{
							"name": "Sort modes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "edd7a262-6605-4996-9a69-b0f806018c9c",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"modes_id\", pm.environment.get(\"mode_id_1\")+'|'+pm.environment.get(\"mode_id_0\"));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "268787c2-dcd8-4738-a665-2b6ddac31923",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/modes/sorting?token={{token}}&modes_id={{modes_id}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"modes",
										"sorting"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "modes_id",
											"value": "{{modes_id}}",
											"equals": true
										}
									]
								},
								"description": "Request to sort the modes of the application"
							},
							"response": []
						},
						{
							"name": "Get Modes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75d9a0e6-57f7-4ec6-9f97-2beb538b7f45",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/modes?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}&action={{action}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"modes"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										},
										{
											"key": "action",
											"value": "{{action}}",
											"equals": true
										}
									]
								},
								"description": "Request to get Modes"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "phpinfo",
					"description": "Folder for phpinfo",
					"item": [
						{
							"name": "Get phpinfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a547e362-73b0-4fee-8771-67af9c640dab",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/phpinfo?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"phpinfo"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									]
								},
								"description": "Request to get phpinfo"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "tabs",
					"description": "Folder for tabs",
					"item": [
						{
							"name": "Get Tabs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3bf13009-d94b-41e9-b346-739e256e80dd",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.tabs[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"tab_id\",jsonData.tabs[0].tab_id);",
											"    }",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/tabs?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"tabs"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										}
									]
								},
								"description": "Request to get Tabs"
							},
							"response": []
						},
						{
							"name": "Get Tab",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3617310-8b60-4193-9679-9019bb593cbf",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/tabs/:tab_id?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"tabs",
										":tab_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "tab_id",
											"value": "{{tab_id}}"
										}
									]
								},
								"description": "Request to get Tab by mode id"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "versions",
					"description": "Folder for versions",
					"item": [
						{
							"name": "Get versions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "452bca3d-3e26-498e-9263-b09cbebef439",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/versions?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"versions"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									]
								},
								"description": "Request to get versions"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "webservices",
					"description": "Folder for webservices",
					"item": [
						{
							"name": "Get WebServices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a0cb67b-b7e3-4fdd-b890-ca1d358c5a84",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.webservices[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"web_service\",jsonData.webservices[0].name);",
											"    }",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x_vm_json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/webservices?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"webservices"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									]
								},
								"description": "Request to get webservices"
							},
							"response": []
						},
						{
							"name": "Get WebService",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64b6123c-5cf8-4232-b279-957ea07b2c00",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x_vm_json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/webservices/:web_service?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"webservices",
										":web_service"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "web_service",
											"value": "{{web_service}}"
										}
									]
								},
								"description": "Request to get WebService by id"
							},
							"response": []
						},
						{
							"name": "Get ressources list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6b863cc-fced-4d95-a50c-5c676bc3079a",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/x_vm_json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/webservices/:web_service/ressources?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"webservices",
										":web_service",
										"ressources"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "web_service",
											"value": "{{web_service}}"
										}
									]
								},
								"description": "Request to get ressources list"
							},
							"response": []
						},
						{
							"name": "Get ressources infos",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7bb2c23-e0a0-4dd5-b1fa-c957a868f99a",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/x_vm_json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/webservices/:web_service/ressources/:ressource?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"webservices",
										":web_service",
										"ressources",
										":ressource"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "web_service",
											"value": "{{web_service}}"
										},
										{
											"key": "ressource",
											"value": "{{ressource}}"
										}
									]
								},
								"description": "Request to get ressources infos"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "vitissections",
					"description": "Folder for vitissections",
					"item": [
						{
							"name": "Get VitisSections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c142997-dbd8-44b3-bcdb-a351497e9dbb",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.vitissections[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"section_id\",jsonData.vitissections[0].section_id);",
											"    }",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/vitissections?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"vitissections"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										}
									]
								},
								"description": "Request to get VitisSections"
							},
							"response": []
						},
						{
							"name": "Get VitisSection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28372f39-53df-4488-b5b9-30df8df5f0e5",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/vitissections/:section_id?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"vitissections",
										":section_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "section_id",
											"value": "{{section_id}}"
										}
									]
								},
								"description": "Request to get VitisSection by mode id"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "b480f772-0450-4c13-ab41-ba7e9ad67724",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"id": "6d6b4aca-2d26-40ce-9905-ef5895234294",
								"type": "text/javascript"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "loop",
					"description": "",
					"item": [
						{
							"name": "Add User //loop with basic user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2690c799-0b85-4bda-a811-be5710cb9274",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"var b = pm.environment.get(\"bool\");",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    console.log(b);",
											"    ",
											"}",
											"",
											"if(b == \"admin\"){",
											"    pm.environment.set(\"user_id\",jsonData.user_id);",
											"    console.log(\"user_id =\" + jsonData.user_id);",
											"}",
											"if(b == \"admin\"){",
											"    postman.setNextRequest(\"Get private token\");",
											"}",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2de2e10-0db8-4028-bc5b-fc57ad646c1f",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"login\", \"Basic_user1\");",
											"pm.environment.set(\"name\", \"Basic_user1\");",
											"",
											"pm.environment.set(\"user\", \"Basic_user1\");",
											"",
											"pm.environment.set(\"password\", \"Basic_user1\");",
											"pm.environment.set(\"password_confirm\", \"Basic_user1\");",
											"pm.environment.set(\"company\",\"corp\");",
											"pm.environment.set(\"email\",\"Basic_user1@corp.com\");",
											"pm.environment.set(\"department\",\"22334\");",
											"pm.environment.set(\"groups\", \"1\"); //1 = demo",
											"pm.environment.set(\"privileges\",\"vitis_user\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"type": "text",
											"value": "{{token}}"
										},
										{
											"key": "login",
											"type": "text",
											"value": "{{login}}"
										},
										{
											"key": "action",
											"type": "text",
											"value": "{{action}}"
										},
										{
											"key": "name",
											"type": "text",
											"value": "{{name}}"
										},
										{
											"key": "email",
											"type": "text",
											"value": "{{email}}"
										},
										{
											"key": "company",
											"type": "text",
											"value": "{{company}}"
										},
										{
											"key": "department",
											"type": "text",
											"value": "{{department}}"
										},
										{
											"key": "groups",
											"type": "text",
											"value": "{{groups}}"
										},
										{
											"key": "privileges",
											"type": "text",
											"value": "{{privileges}}"
										},
										{
											"key": "ip_constraint",
											"type": "text",
											"value": "{{ip_constraint}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "password_confirm",
											"type": "text",
											"value": "{{password_confirm}}"
										},
										{
											"key": "restriction",
											"type": "text",
											"value": "{{restriction}}"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/users",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"users"
									]
								},
								"description": "Request to add user\nThis user will be use to try everything again without admin right"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean",
					"description": "",
					"item": [
						{
							"name": "Get private token (Admin) //Clean",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bae0f17-c5f1-4939-b72a-a8125bf80e5d",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"    //console.log(jsonData.token);",
											"    pm.environment.set(\"token\", jsonData.token);",
											"    pm.environment.set(\"user\", \"\");",
											"    pm.environment.set(\"password\", \"\");",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e95d9582-ebaf-4c62-82cc-cd53d53680ce",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"user\", \"admin\");",
											"pm.environment.set(\"password\", \"admin\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user",
											"type": "text",
											"value": "{{user}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "duration",
											"type": "text",
											"value": "60"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/privatetoken",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"privatetoken"
									]
								},
								"description": "Request to get a token"
							},
							"response": []
						},
						{
							"name": "delete User //Clean",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cdfb019-6d77-4a98-b6f8-c590627a3755",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/users/:user_id?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								},
								"description": "Request to delete User"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "edfb6f02-fe85-4dc8-8e79-2abd5d3b9d66",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "7b9d63f7-8991-4759-b916-b944f32121a0",
						"type": "text/javascript"
					}
				}
			]
		}
	]
}